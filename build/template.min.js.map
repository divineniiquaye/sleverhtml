{"version":3,"sources":["js/slever.js","js/template.js"],"names":["factory","define","amd","module","exports","window","slever","_tag","_ref","_glue","_reg","traverse","strategy","context","self","flag","pre","firstElementChild","post","isSameNode","nextElementSibling","parentElement","$","selector","slice","call","document","querySelectorAll","Props","data","this","save","Ref","element","fn","Object","setPrototypeOf","[object Object]","type","options","split","forEach","e","_raw","addEventListener","bind","removeEventListener","cb","detail","dispatchEvent","CustomEvent","out","push","sibling","matches","previousElementSibling","hasOwnProperty","prior","_props","changed","key","escalate","ref","contains","unload","load","name","tag","getAttribute","indexOf","setAttribute","trim","parent","re","RegExp","replace","_refs","target","_parent","i","j","root","documentElement","ourMeta","node","createElement","head","appendChild","tree","hasAttribute","length","pop","instantiate","com","css","loaded","content","style","props","tmp","innerHTML","html","frag","createDocumentFragment","glue","firstChild","replaceChild","remove","merge","src","dest","attr","attributes","len","value","classList","add","apply","nodeType","Node","TEXT_NODE","textContent","insertBefore","refs","removeAttribute","lastChild","removeChild","prototype","override","config","all","querySelector","request","url","open","callback","Browser","Request","opentype","rtype","Cookie","write","platform","responseType","send","onreadystatechange","readyState","status","response","jsdom","assign","JSDOM","require","_config","js","cmd","expr","block","match","ReferenceError","fallback","substring","index","transpile","result","children","tagName","toLowerCase","section","script","outerHTML","raw","compile","regex","branch","current","level","substr","SyntaxError","body","parentNode","settings"],"mappings":"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","sourcesContent":["/*! slever.js | MIT License | (c) 2019 Divine Niiquaye */\n\n\"use strict\";\n\n(function(factory) {\n    if (typeof define == \"function\" && define.amd)\n        // AMD; RequireJS\n        define(factory);\n    else if (typeof module == \"object\" && module.exports)\n        // CommonJS\n        module.exports = factory();\n    // Browser\n    else window.slever = factory();\n})(function() {\n    let _tag = \"tag\", // Component glue point\n        _ref = \"ref\", // Reference to HTML element\n        _glue = \"glue\", // Glue tag\n        _reg = {}; // Component registry\n\n    /**\n     * Traverse DOM tree\n     * @param object strategy\n     * @param element context\n     */\n    function traverse(strategy, context) {\n        let self = context,\n            flag = false;\n        while (self) {\n            if (!flag) {\n                // Pre-order strategy\n                if (strategy.pre) strategy.pre(self, flag);\n                if (self.firstElementChild) {\n                    flag = false;\n                    self = self.firstElementChild;\n                    continue;\n                }\n            }\n            // Post-order strategy\n            if (strategy.post) strategy.post(self, flag);\n            if (self.isSameNode(context)) break;\n            flag = false;\n            if (self.nextElementSibling) self = self.nextElementSibling;\n            else {\n                flag = true;\n                self = self.parentElement;\n            }\n        }\n    }\n\n    /**\n     * Find DOM elements that match specified CSS selector\n     * @return array\n     * @param string selector\n     * @param element context\n     */\n    function $(selector, context) {\n        return [].slice.call((context || document).querySelectorAll(selector));\n    }\n\n    /**\n     * Component properties\n     * @constructor\n     * @param object data?\n     */\n    function Props(data) {\n        if (data) this.save(data);\n    }\n\n    Props.prototype = {\n        /**\n         * Save properties\n         * @param object data\n         * @param boolean override?\n         */\n        save(data, override) {\n            override = override == void 0 || override;\n            if (typeof data == \"object\")\n                for (let key in data)\n                    data.hasOwnProperty(key) &&\n                        (!this.hasOwnProperty(key) || override) &&\n                        (this[key] = data[key]);\n        }\n    };\n\n    /**\n     * HTML element reference\n     * @constructor\n     * @param element element\n     * @param function fn?\n     */\n    function Ref(element, fn) {\n        let self = this;\n        Object.setPrototypeOf(this, {\n            /**\n             * Add event listener\n             * @return object\n             * @param string type\n             * @param function fn\n             * @param object options?\n             */\n            on(type, fn, options) {\n                type.split(\" \").forEach(\n                    function(e) {\n                        this._raw.addEventListener(e, fn.bind(this), options);\n                    }.bind(this)\n                );\n                return this;\n            },\n            /**\n             * Remove event listener\n             * @return object\n             * @param string type\n             * @param function fn\n             * @param object options?\n             */\n            off(type, fn, options) {\n                type.split(\" \").forEach(\n                    function(e) {\n                        this._raw.removeEventListener(\n                            e,\n                            fn.bind(this),\n                            options\n                        );\n                    }.bind(this)\n                );\n                return this;\n            },\n            /**\n             * Add single-use event listener\n             * @return object\n             * @param string type\n             * @param function fn\n             * @param object options?\n             */\n            once(type, fn, options) {\n                type.split(\" \").forEach(\n                    function(e) {\n                        var cb = function() {\n                            fn.call(this);\n                            this._raw.removeEventListener(e, cb, options);\n                        }.bind(this);\n                        this._raw.addEventListener(e, cb, options);\n                    }.bind(this)\n                );\n                return this;\n            },\n            /**\n             * Dispatch an event\n             * @return object\n             * @param string type\n             * @param scalar|object detail\n             */\n            emit(type, detail) {\n                type.split(\" \").forEach(\n                    function(e) {\n                        this._raw.dispatchEvent(\n                            new CustomEvent(type, { detail })\n                        );\n                    }.bind(this)\n                );\n                return this;\n            },\n            /**\n             * Find elements that match CSS selector\n             * @return array\n             * @param string selector\n             */\n            find(selector) {\n                let out = [];\n                $(selector, this._raw).forEach(function(element) {\n                    out.push(new Ref(element));\n                });\n                return out;\n            },\n            /**\n             * Return next sibling; Match CSS selector if specified\n             * @param object|undefined\n             * @param string selector\n             */\n            next(selector) {\n                let element = this._raw,\n                    sibling;\n                while ((sibling = element.nextElementSibling)) {\n                    if (!selector || sibling.matches(selector)) break;\n                    element = element.nextElementSibling;\n                }\n                return sibling ? new Ref(sibling) : void 0;\n            },\n            /**\n             * Return previous sibling; Match CSS selector if specified\n             * @param object|undefined\n             * @param string selector\n             */\n            prev(selector) {\n                let element = this._raw,\n                    sibling;\n                while ((sibling = element.previousElementSibling)) {\n                    if (!selector || sibling.matches(selector)) break;\n                    element = element.previousElementSibling;\n                }\n                return sibling ? new Ref(sibling) : void 0;\n            },\n            /**\n             * Inject properties into this element\n             * @return object\n             * @param object data\n             */\n            inject(data) {\n                let element = this._raw;\n                if (element.hasOwnProperty(\"_props\")) {\n                    let prior = element._props,\n                        changed = false;\n                    // Detect changes\n                    for (let key in data)\n                        if (\n                            prior.hasOwnProperty(key) &&\n                            data.hasOwnProperty(key) &&\n                            prior[key] != data[key]\n                        ) {\n                            changed = true;\n                            break;\n                        }\n                    element._props.save(data);\n                    escalate(element);\n                    if (changed)\n                        // Cascade changes\n                        traverse(\n                            {\n                                pre(self) {\n                                    if (self.hasOwnProperty(\"_props\")) {\n                                        self._props.save(data);\n                                        self.dispatchEvent(\n                                            new CustomEvent(\"update\")\n                                        );\n                                    }\n                                }\n                            },\n                            element\n                        );\n                } else element._props = new Props(data);\n                return this;\n            },\n            /**\n             * Expose underlying HTML element of specified Ref\n             * @return object|undefined\n             * @param object ref\n             */\n            expose(ref) {\n                if (!ref) ref = this;\n                return ref._raw && this._raw.contains(ref._raw)\n                    ? ref._raw\n                    : void 0;\n            },\n            /**\n             * Detach component\n             * @return object\n             */\n            unload() {\n                unload(this._raw);\n                return this;\n            },\n            /**\n             * Attach component\n             * @return object\n             * @param object data?\n             */\n            load(data) {\n                let element = this._raw;\n                load(data || element._props, element);\n                return this;\n            },\n            /**\n             * Reload component\n             * @return object\n             * @param object data?\n             */\n            reload(data) {\n                this.unload();\n                this.load(data);\n                return this;\n            },\n            /**\n             * Set tag attribute if not exists and add name to tag attribute\n             * @param string name\n             */\n            addTag(name) {\n                let element = self._raw,\n                    tag = element.getAttribute(_tag);\n                if (!tag || tag.split(\" \").indexOf(name) < 0)\n                    element.setAttribute(\n                        _tag,\n                        ((tag || \"\") + \" \" + name).trim()\n                    );\n                // Inherit props\n                let parent = element.parentElement;\n                while (parent && !parent._props) parent = parent.parentElement;\n                if (!element.hasOwnProperty(\"_props\"))\n                    element._props = new Props();\n                if (parent) element._props.save(parent._props);\n                return self;\n            },\n            /**\n             * Remove name from tag attribute\n             * @param string name\n             */\n            removeTag(name) {\n                let element = self._raw,\n                    tag = element.getAttribute(_tag),\n                    re = new RegExp(\"(?<=^|s)\" + name + \"(?=s|$)\");\n                element.setAttribute(_tag, tag.replace(re, \"\"));\n                return self;\n            },\n            /**\n             * Make the raw HTML element private/obscure\n             */\n            _raw: element\n        });\n        if (fn) fn.call(this, element._props, element._refs);\n    }\n\n    /**\n     * Escalate properties of element\n     * @param element\n     */\n    function escalate(target) {\n        let parent = target._parent;\n        if (parent)\n            for (let i in parent._refs)\n                if (target.isSameNode(parent._refs[i]._raw)) {\n                    // Parent has a Ref pointing to this element\n                    for (let j in target._props)\n                        if (target._props.hasOwnProperty(j))\n                            parent._refs[i][j] = target._props[j];\n                    if (target.isSameNode(parent)) escalate(parent);\n                    break;\n                }\n    }\n\n    /**\n     * Style the specified component\n     * @param object props\n     * @param function content\n     */\n    function style(props, content) {\n        let css = content.call(this, props).trim();\n        if (css) {\n            let tmp = document.createElement(\"template\");\n            tmp.innerHTML = \"<style>\" + css + \"</style>\";\n            document.head.appendChild(tmp.content);\n        }\n    }\n\n    /**\n     * Merge attributes of source and destination elements\n     * @param element src\n     * @param element dest\n     */\n    function merge(src, dest) {\n        let attr = src.attributes;\n        for (let i = 0, len = attr.length; i < len; i++) {\n            attr[i].value = attr[i].value.trim();\n            if (attr[i].name == \"class\")\n                dest.classList.add.apply(\n                    dest.classList,\n                    attr[i].value.split(\" \")\n                );\n            else dest.setAttribute(attr[i].name, attr[i].value);\n        }\n    }\n\n    /**\n     * Attach component (and subcomponents)\n     * @param object data?\n     * @param element root?\n     */\n    function load(data, root) {\n        root = root || document.documentElement;\n        ourMeta();\n        let tree = [],\n            parent;\n        traverse(\n            {\n                pre(self) {\n                    if (self.hasAttribute(_tag)) {\n                        self.getAttribute(_tag)\n                            .split(\" \")\n                            .forEach(function(name) {\n                                if (_reg[name]) {\n                                    // Find the parent component\n                                    parent = tree[tree.length - 1];\n                                    if (parent)\n                                        while (!parent.contains(self)) {\n                                            tree.pop();\n                                            parent = tree[tree.length - 1];\n                                        }\n                                    self._parent = parent;\n                                    // Initialize props and auto-inherit properties\n                                    self._props = self._props || new Props();\n                                    self._props.save(\n                                        parent ? parent._props : data,\n                                        false\n                                    );\n                                    // Initialize refs and escalate properties\n                                    self._refs = {};\n                                    if (parent) escalate(self);\n                                    tree.push(self);\n                                    // Instantate the component\n                                    (function instantiate(name) {\n                                        if (\n                                            !self._tag ||\n                                            self._tag.split(\" \").indexOf(name) <\n                                                0\n                                        )\n                                            self._tag = (\n                                                (self._tag || \"\") +\n                                                \" \" +\n                                                name\n                                            ).trim();\n                                        let com = new Ref(self, _reg[name].fn);\n                                        // JIT-load CSS\n                                        if (\n                                            !_reg[name].css.loaded &&\n                                            _reg[name].css.content\n                                        ) {\n                                            style.call(\n                                                com,\n                                                self._props,\n                                                _reg[name].css.content\n                                            );\n                                            _reg[name].css.loaded = true;\n                                        }\n                                        let tmp = document.createElement(\n                                            \"template\"\n                                        );\n                                        tmp.innerHTML = _reg[name].html.call(\n                                            com,\n                                            self._props\n                                        );\n                                        // Glue the component instance\n                                        let frag = document.createDocumentFragment(),\n                                            glue = $(_glue, tmp.content);\n                                        if (glue.length) {\n                                            while (self.firstChild)\n                                                frag.appendChild(\n                                                    self.firstChild\n                                                );\n                                            glue[0].parentElement.replaceChild(\n                                                frag,\n                                                glue[0]\n                                            );\n                                            glue.forEach(function(node) {\n                                                node.remove();\n                                            });\n                                        }\n                                        // Merge attributes with host element\n                                        let tag = tmp.content.firstElementChild;\n                                        merge(tag, self);\n                                        while (tag.firstChild)\n                                            if (\n                                                tag.firstChild.nodeType !=\n                                                    window.Node.TEXT_NODE ||\n                                                tag.firstChild.textContent.trim()\n                                            )\n                                                frag.appendChild(\n                                                    tag.firstChild\n                                                );\n                                            // Trim whitespace\n                                            else tag.firstChild.remove();\n                                        self.insertBefore(\n                                            frag,\n                                            self.firstElementChild\n                                        );\n                                        // Process refs\n                                        let refs = $(\"[\" + _ref + \"]\", self);\n                                        if (self.hasAttribute(_ref))\n                                            refs.push(self);\n                                        refs.forEach(function(ref) {\n                                            self._refs[\n                                                ref.getAttribute(_ref)\n                                            ] = new Ref(ref);\n                                            ref.removeAttribute(_ref);\n                                        });\n                                        if (tag.hasAttribute(_tag))\n                                            tag.getAttribute(_tag)\n                                                .split(\" \")\n                                                .forEach(function(name) {\n                                                    instantiate(name);\n                                                });\n                                    })(name);\n                                }\n                            });\n                        self.dispatchEvent(new CustomEvent(\"ready\"));\n                        self.removeAttribute(_tag);\n                    }\n                }\n            },\n            root\n        );\n    }\n\n    /**\n     * Detach component (and subcomponents)\n     * @param element root?\n     */\n    function unload(root) {\n        traverse(\n            {\n                post(self) {\n                    self.dispatchEvent(new CustomEvent(\"unload\"));\n                    if (!self.getAttribute(_tag) && self._tag) {\n                        self.setAttribute(_tag, self._tag);\n                        delete self._tag;\n                    }\n                    while (self.lastChild) self.removeChild(self.lastChild);\n                }\n            },\n            root || window.document.documentElement\n        );\n    }\n\n    /**\n     * Select an element in the html Dom\n     * @param {string} element\n     * @param {boolean} all\n     */\n    function selector(element, all = false) {\n        if (true == all) {\n            return document.querySelectorAll(element);\n        }\n        if (false == all) {\n            return document.querySelector(element);\n        }\n    }\n\n    /**\n     * Get the data from a url or file using ajax\n     * @param {string} url\n     * @param {string} open\n     * @param {string} type\n     * @param callback\n     */\n    function request(url, open, type, callback) {\n        var request = Browser.Request();\n        if (open == null) var opentype = \"GET\";\n        if (type == null) var rtype = \"json\";\n\n        var cookie = new Cookie(\"user_platform\");\n        cookie.write(Browser.platform);\n\n        request.open(opentype || open, url);\n        request.responseType = rtype || type;\n        request.send();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === 4 && request.status === 200) {\n                callback(request.response);\n            }\n        };\n    }\n\n    // Public: Find version identifier for the initial page load.\n    //\n    // Returns String version or undefined.\n    function ourMeta() {\n        \n        var node = document.createElement('meta');\n        node.setAttribute(\"http-equiv\", \"X-SLEVER\");\n        node.setAttribute(\"content\", '0.1.1');\n\n        document.head.appendChild(node);\n    }\n\n    return {\n        /**\n         * Configure router\n         * @param config\n         */\n        router(config) {},\n        /**\n         * Register a component\n         * @param string name\n         * @param string html\n         * @param function fn\n         * @param string css\n         */\n        register(name, html, fn, css) {\n            fn.prototype = Ref;\n            _reg[name] = {\n                html,\n                fn,\n                css: {\n                    content: css,\n                    loaded: true\n                }\n            };\n        },\n        /**\n         * Exposed methods\n         */\n        load,\n        unload,\n        selector,\n        request\n    };\n});\n","/*! template.js | MIT License | (c) 2019 Divine Niiquaye */\n\n\"use strict\";\n\n(function(factory) {\n    const docType = \"<!DOCTYPE html>\";\n\n    if (typeof define == \"function\" && define.amd)\n        // AMD; RequireJS\n        define([\"jsdom\", \"./slever\"], function(jsdom, slever) {\n            return Object.assign(\n                slever,\n                factory(new jsdom.JSDOM(docType).window)\n            );\n        });\n    else if (typeof module == \"object\" && module.exports) {\n        // CommonJS\n        module.exports = Object.assign(\n            require(\"./slever\"),\n            factory(new (require(\"jsdom\")).JSDOM(docType).window)\n        );\n    }\n    // Browser\n    else window.slever = Object.assign(window.slever, factory(window));\n})(function(window) {\n    /**\n     * Pre-processors\n     */\n    var _config = {\n        html: void 0,\n        js: void 0,\n        css: void 0\n    };\n\n    /**\n     * Override default settings\n     * @param object settings\n     */\n    function config(settings) {\n        if (settings)\n            for (var key in settings)\n                if (settings.hasOwnProperty(key)) _config[key] = settings[key];\n        return this;\n    }\n\n    /**\n     * Find DOM elements that match specified CSS selector\n     * @return array\n     * @param string selector\n     * @param element context\n     */\n    function $(selector, context) {\n        return [].slice.call(\n            (context || window.document).querySelectorAll(selector)\n        );\n    }\n\n    /**\n     * Template block handlers\n     */\n    const cmd = {\n        /**\n         * Traverse array and return equivalent ES6+ literal\n         * @return string\n         * @param string expr\n         * @param string block\n         */\n        _foreach(expr, block) {\n            let match;\n            if ((match = expr.match(/(.+)\\s+as\\s+(?:(.+):)?(.+)/)))\n                return (\n                    \"${\" +\n                    match[1] +\n                    \".map(\" +\n                    \"function(\" +\n                    match[3] +\n                    (match[2] ? \",\" + match[2] : \"\") +\n                    \") {\\n\" +\n                    \"return (`\" +\n                    block +\n                    \"`)\" +\n                    \"}).\" +\n                    \"join(`\\\\n`)\" +\n                    \"}\"\n                );\n            else throw new ReferenceError(expr);\n        },\n        /**\n         * Transform if..else block to ES6+ literal ternary expression\n         * @return string\n         * @param string expr\n         * @param string block\n         */\n        _if(expr, block) {\n            let html = \"${\" + expr + \"?\",\n                fallback = false,\n                match;\n            while ((match = block.match(/#else(?:\\s+if\\s*\\((.+)\\))?\\s*:/))) {\n                html += \"`\" + block.substring(0, match.index).trim() + \"`:\";\n                if (match[1]) html += match[1] + \"?\";\n                else fallback = true;\n                block = block.substring(match.index + match[0].length);\n            }\n            return (\n                html + \"`\" + block.trim() + \"`\" + (fallback ? \"\" : \":``\") + \"}\"\n            );\n        }\n    };\n\n    /**\n     * Convert template blocks to regular Javascript\n     * @return string\n     * @param string html\n     */\n    function compile(html) {\n        const regex = /#(\\w+)\\s+(?:\\(\\s*(.*?)\\s*\\))?(?=\\s*\\{)/;\n        let level = 0,\n            tree = [],\n            branch,\n            current,\n            content,\n            match,\n            block;\n        while ((match = html.match(/((?:#\\w+\\s.*?|\\$)?\\{)|(\\})/))) {\n            content = html.substr(0, match.index);\n            if (match[1]) {\n                tree.push([level, content], [level, match[1]]);\n                level++;\n            } else {\n                tree.push([level, content]);\n                // Roll-up to start of block\n                while (tree[tree.length - 1][0] > level - 1) {\n                    branch = tree.pop();\n                    if (tree.length) {\n                        current = tree[tree.length - 1];\n                        if (current[0] == level - 1) {\n                            // Start of block found\n                            if ((block = current[1].match(regex))) {\n                                const fn = cmd[\"_\" + block[1]];\n                                if (!fn) throw new SyntaxError(block[0]);\n                                tree[tree.length - 1][1] = fn(\n                                    block[2],\n                                    branch[1]\n                                );\n                                branch[1] = \"\";\n                            } else branch[1] += match[2];\n                        }\n                        tree[tree.length - 1][1] += branch[1];\n                    } else throw new SyntaxError(match[2]);\n                }\n                level--;\n            }\n            html = html.substring(match.index + match[0].length);\n        }\n        tree.push([level, html]);\n        html = \"\";\n        for (let i = 0, len = tree.length; i < len; i++) {\n            if (tree[i][0]) throw new SyntaxError(tree[i - 1][1]);\n            html += tree[i][1];\n        }\n        return html;\n    }\n\n    /**\n     * Transpile to Javascript\n     * @return string\n     * @param string html\n     * @param element context?\n     */\n    function transpile(html, context) {\n        let result = \"\";\n        if (!context) {\n            let tmp = window.document.createElement(\"template\");\n            tmp.innerHTML = html;\n            context = tmp.content;\n        }\n        [].slice.call(context.children).forEach(function(element) {\n            let name = element.tagName.toLowerCase(),\n                section = {\n                    script: \"\",\n                    style: \"\"\n                };\n            [\"script\", \"style\"].forEach(function(type) {\n                $(type, element).forEach(function(tag) {\n                    let content = tag.textContent.trim();\n                    if (content) section[type] += content + \"\\n\";\n                    // Align with sourcemap\n                    if (type == \"script\") tag.remove();\n                    else tag.outerHTML = tag.innerHTML.replace(/[^\\n]+/g, \"\");\n                });\n            });\n            let raw = {\n                html: element.outerHTML.trim(),\n                js: section.script.trim(),\n                css: section.style\n                    .replace(/\\s*([{}~>:;,\\s])\\s*/g, \"$1\")\n                    .replace(/\\/\\*.+?\\*\\//g, \"\")\n                    .trim()\n            };\n            for (var key in raw)\n                if (_config[key]) raw[key] = _config[key](raw[key]);\n            result +=\n                \"slever.register(\" +\n                '\"' +\n                name +\n                '\",' +\n                \"function(props) {\" +\n                \"return (\" +\n                \"`\" +\n                compile(raw.html) +\n                \"`\" +\n                \")\" +\n                \"},\" +\n                \"function(props,refs) {\" +\n                (raw.js || \"\") +\n                \"},\" +\n                \"function(props) {\" +\n                \"return (\" +\n                \"`\" +\n                raw.css +\n                \"`\" +\n                \")\" +\n                \"}\" +\n                \");\\n\";\n        });\n        return result || html;\n    }\n\n    /**\n     * Process intrinsic components\n     **/\n    $('template[type=\"x-component\"]').forEach(function(element) {\n        let tmp = window.document.createElement(\"script\");\n        tmp.textContent = transpile(element.innerHTML);\n        document.body.removeChild(document.body.appendChild(tmp));\n        element.parentNode.removeChild(element);\n    });\n\n    return {\n        transpile,\n        config\n    };\n});\n"]}